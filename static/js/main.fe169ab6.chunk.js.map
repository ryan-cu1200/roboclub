{"version":3,"sources":["components/card/index.js","components/cards/index.js","components/SearchBox/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","style","height","width","src","monster","id","name","CardList","monsters","map","key","SearchBox","placeholder","handlerChange","type","onChange","App","state","searchFiled","fetch","then","response","json","users","setState","this","filterRobots","filter","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wOAKaA,G,KAAO,SAAAC,GAClB,OACA,yBAAKC,UAAW,mBAId,yBAAKA,UAAW,oBACjB,yBAAMC,MAAQ,CAACC,OAAO,QAAQC,MAAM,SAAUC,IAAG,+BAA2BL,EAAMM,QAAQC,GAAzC,gBACjD,4BACCP,EAAMM,QAAQE,UCVLC,EAAW,SAAAT,GACtB,OACE,yBAAKC,UAAU,aACZD,EAAMU,SAASC,IAAI,SAAAD,GAAQ,OAC1B,kBAAC,EAAD,CAAME,IAAKF,EAASH,GAAID,QAASI,QCL5BG,EAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,cAAf,OACxB,2BACAd,UAAW,SACVe,KAAM,SACPF,YAAcA,EACdG,SAAUF,KCiCKG,E,2MAnCbC,MAAQ,CACNT,SAAU,GACVU,YAAa,I,mFAGM,IAAD,OAClBC,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEhB,SAAUe,Q,+BAGnC,IAAD,SACyBE,KAAKR,MAA7BT,EADD,EACCA,SAASU,EADV,EACUA,YACXQ,EAAelB,EAASmB,OAAO,SAAAnB,GAAQ,OAC3CA,EAASF,KAAKsB,cAAcC,SAASX,EAAYU,iBAEnD,OACE,yBAAK7B,UAAU,oBACf,wBAAIA,UAAW,MAAf,cAEE,kBAAC,EAAD,CAECa,YAAY,SACXC,cAAe,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAI5D,4BACE,kBAAC,EAAD,CAAUxB,SAAUkB,U,GA7BZO,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC,gB","file":"static/js/main.fe169ab6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../cards/card.css\";\r\n\r\n\r\n\r\nexport const Card = props => {\r\n  return (\r\n  <div className =\"container-fluid\">\r\n \r\n\r\n  \r\n    <div className =\" card-container \">\r\n   <img  style ={{height:\"250px\",width:\"250px\"}} src= {`https://robohash.org/${props.monster.id}?set=set1}`}/>\r\n   <h1>\r\n   {props.monster.name}\r\n \r\n   </h1>\r\n   </div>\r\n    </div>\r\n\r\n \r\n  );\r\n};\r\n ","import React from \"react\";\r\nimport \"../cards/card.css\";\r\nimport { Card } from \"../card\";\r\n\r\nexport const CardList = props => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map(monsters => (\r\n        <Card key={monsters.id} monster={monsters} />\r\n      ))}\r\n    </div>\r\n  );\r\n}; \r\n","import React from \"react\";\r\nimport  \"../cards/card.css\"\r\n\r\nexport const SearchBox =({placeholder ,handlerChange}) => (\r\n<input\r\nclassName =\"search\"\r\n type =\"search\"\r\nplaceholder ={placeholder}\r\nonChange={handlerChange}/>\r\n\r\n    )\r\n","import React, { Component } from \"react\";\nimport { CardList } from \"./components/cards\";\nimport { SearchBox } from \"../src/components/SearchBox/\";\nimport '../src/components/cards/card.css'\n\nclass App extends Component {\n  state = {\n    monsters: [],\n    searchFiled: \"\"\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  render() {\n    const { monsters,searchFiled} = this.state;\n    const filterRobots = monsters.filter(monsters  =>\n      monsters.name.toLowerCase().includes(searchFiled.toLowerCase())\n      )\n    return (\n      <div className=\"divv text-center\">\n      <h1 className =\"hp\">RobotsClub</h1>\n        \n        <SearchBox\n\n         placeholder=\"search\"\n          handlerChange={e => this.setState({ searchFiled: e.target.value })}\n\n        />\n\n        <h1>\n          <CardList monsters={filterRobots}></CardList>\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}